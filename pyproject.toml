[project]
name = "py-cachify"
version = "2.0.10"
description = "Distributed locks, caching, and locking decorators at hand"
authors = [{ name = "Galtozzy", email = "galtozzy+git@gmail.com" }]
requires-python = ">=3.8,<4.0"
readme = "README.md"
license = "MIT"
classifiers = [
    "Intended Audience :: Information Technology",
    "Intended Audience :: System Administrators",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development",
    "Typing :: Typed",
    "Development Status :: 5 - Production/Stable",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "License :: OSI Approved :: MIT License",
]
dependencies = ["typing-extensions>=4.12.2,<5"]

[project.urls]
Homepage = "https://github.com/EzyGang/py-cachify"
Repository = "https://github.com/EzyGang/py-cachify"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[dependency-groups]
dev = [
    "pytest>=8.3.2,<9",
    "pytest-mock>=3.14.0,<4",
    "pytest-cov>=5.0.0,<6",
    "taskipy>=1.13.0,<2",
    "mypy>=1.11.1,<2",
    "coverage>=7.6.1,<8",
    "pytest-asyncio>=0.24.0,<0.25",
    "pytest-socket>=0.7.0,<0.8",
    "ruff>=0.9.2,<0.10",
]
docs = [
    "mkdocs>=1.6.0,<2",
    "mkdocs-material>=9.5.28,<10",
    "pygments>=2.18.0,<3",
    "termynal>=0.12.1,<0.13 ; python_version >= '3.8.1' and python_version < '4.0'",
    "beautifulsoup4>=4.12.3,<5",
]
integration = ["redis>=5.0.7,<6"]

[tool.uv]
default-groups = [
    "dev",
    "docs",
    "integration",
]

[tool.hatch.build.targets.sdist]
include = [
    "py_cachify",
    "py_cachify/py.typed",
    "README.md",
]

[tool.hatch.build.targets.wheel]
include = [
    "py_cachify",
    "py_cachify/py.typed",
    "README.md",
]

[tool.taskipy.tasks]
format-and-lint = "task ruff && task mypy-lint"

ruff = "ruff format ./py_cachify/ ./tests/ ./integration_tests/ ./docs/scripts/ && ruff check ./py_cachify/ ./tests/ ./integration_tests/ ./docs/scripts/ --fix --unsafe-fixes"
tests = "PYTHONPATH=. pytest tests/ -vvv"
integration-tests = "PYTHONPATH=. pytest integration_tests/ --no-cov"

docs-dev = "mkdocs serve"
ruff-lint = "ruff check ./py_cachify"
mypy-lint = "mypy --install-types --non-interactive ./py_cachify/"
poetry-check = "poetry check"
pip-check = "pip check"

[tool.ruff]
line-length = 120
extend-exclude = ["site-packages", "*.pyi"]
target-version = 'py38'

[tool.ruff.lint]
fixable = ["ALL"]
unfixable = []
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "UP", # pyupgrade
]
ignore = [
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
    "B010", # do not rewrite setattr()
]

[tool.ruff.format]
quote-style = 'single'
indent-style = 'space'
line-ending = 'auto'
skip-magic-trailing-comma = false
exclude = ['*.pyi']

[tool.ruff.lint.mccabe]
max-complexity = 6

[tool.ruff.lint.isort]
split-on-trailing-comma = false
lines-after-imports = 2
known-first-party = ["py_cachify"]

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

[tool.mypy]
# Mypy configuration:
# https://mypy.readthedocs.io/en/latest/config_file.html
strict = true
pretty = true

exclude = ['test_']

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    '--strict-markers',
    '--strict-config',
    '--allow-unix-socket',
    '--allow-hosts=127.0.0.1,127.0.1.1,::1',
    '--tb=short',
    '--cov=py_cachify/',
    '--cov-branch',
    '--cov-report=term-missing:skip-covered',
    '--cov-report=xml',
    '--cov-fail-under=100',
]
asyncio_mode = "auto"
python_files = "test*.py"
# Directories that are not visited by pytest collector:
norecursedirs = "*.egg .eggs dist build docs .tox .git __pycache__ config docker etc"
testpaths = ["tests"]

[tool.coverage.run]
# Coverage configuration:
# https://coverage.readthedocs.io/en/latest/config.html
omit = []
concurrency = ['thread']

[tool.coverage.report]
omit = []
exclude_lines = [
    'pragma: no cover',
    '@overload',
    'SyncOrAsync',
    '@abstract',
    'def __repr__',
    'raise AssertionError',
    'raise NotImplementedError',
    'if __name__ == .__main__.:',
    '__all__',
    'if TYPE_CHECKING:',
    'except ModuleNotFoundError:',
]
